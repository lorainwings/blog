(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{424:function(t,a,s){"use strict";s.r(a);var v=s(27),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式小知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式小知识"}},[t._v("#")]),t._v(" 正则表达式小知识")]),t._v(" "),s("p",[t._v("经常使用正则表达式, 但是有些细节知识总是没搞清楚, 在看了《JS 正则表达式》后一些知识点豁然开朗, 此处只做记录, 不做展开;")]),t._v(" "),s("h2",{attrs:{id:"如果要匹配任意字符怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果要匹配任意字符怎么办"}},[t._v("#")]),t._v(" 如果要匹配任意字符怎么办")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("[\\d\\D]")]),t._v("、"),s("code",[t._v("[\\w\\W]")]),t._v("、"),s("code",[t._v("[\\s\\S]")]),t._v(" 和 "),s("code",[t._v("[^]")]),t._v(" 中任何的一个。")]),t._v(" "),s("h2",{attrs:{id:"贪婪匹配与惰性匹配表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配与惰性匹配表示法"}},[t._v("#")]),t._v(" 贪婪匹配与惰性匹配表示法")]),t._v(" "),s("p",[t._v("通过在量词后面加个问号就能实现惰性匹配")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v(" 惰性量词")]),t._v(" "),s("th",[t._v("贪婪量词")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("{m,n}?")]),t._v(" "),s("td",[t._v("{m,n}")])]),t._v(" "),s("tr",[s("td",[t._v("{m,}?")]),t._v(" "),s("td",[t._v("{m,}")])]),t._v(" "),s("tr",[s("td",[t._v("??")]),t._v(" "),s("td",[t._v("?")])]),t._v(" "),s("tr",[s("td",[t._v("+?")]),t._v(" "),s("td",[t._v("+")])]),t._v(" "),s("tr",[s("td",[t._v("*?")]),t._v(" "),s("td",[t._v("*")])])])]),t._v(" "),s("h2",{attrs:{id:"位置匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),s("p",[s("img",{attrs:{src:"/blog/skills/images/regex-place.png",alt:"avatr"}})]),t._v(" "),s("p",[t._v("ES6 正则的位置表示方式总共有: "),s("code",[t._v("^")]),t._v("、 "),s("code",[t._v("$")]),t._v("、"),s("code",[t._v("\\b")]),t._v("、"),s("code",[t._v("\\B")]),t._v("、"),s("code",[t._v("(?=)")]),t._v("、"),s("code",[t._v("(?!)")]),t._v("、"),s("code",[t._v("(?<=)")]),t._v("、"),s("code",[t._v("(?<!)")])]),t._v(" "),s("p",[t._v("其中"),s("code",[t._v("\\b")]),t._v("和"),s("code",[t._v("\\B")]),t._v("表示什么位置?")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("\\b 与\\B 用法:")]),t._v(" "),s("p",[t._v("\\b 是单词边界，具体就是 \\w() 与 \\W 之间的位置，也包括 \\w 与 ^ 之间的位置，和 \\w 与 $ 之间的位置。")]),t._v(" "),s("p",[t._v("\\B 是 \\b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \\b，剩下的都是 \\B 的。")])]),t._v(" "),s("p",[t._v("首先，我们知道，\\w 是字符组 [0-9a-zA-Z_] 的简写形式，即 \\w 是字母数字或者下划线的中任何一个字\n符。而 \\W 是排除字符组 [^0-9a-za-z_] 的简写形式，即 \\W 是 \\w 以外的任何一个字符")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[#JS#] #Lesson_01#.#mp4#"')]),t._v("\n")])])]),s("h2",{attrs:{id:"括号匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号匹配"}},[t._v("#")]),t._v(" 括号匹配")]),t._v(" "),s("p",[t._v("分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配; 反向引用也是一样的;")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d)+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["12345", "5", index: 0, input: "12345"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"匹配回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配回溯"}},[t._v("#")]),t._v(" 匹配回溯")]),t._v(" "),s("p",[t._v("一般语言中(包括 JS)使用的正则引擎是 NFA(非确定型有限自动机),导致匹配回溯的类型主要是三种:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("贪婪量词")]),t._v(" "),s("p",[t._v("少用贪婪量词("),s("code",[t._v(". + ? *")]),t._v(")等")])]),t._v(" "),s("li",[s("p",[t._v("惰性量词")]),t._v(" "),s("p",[t._v("虽然惰性量词不贪，但也会有回溯的现象。比如正则是 "),s("code",[t._v("\\d{1,3}?\\d{1,3}")])])]),t._v(" "),s("li",[s("p",[t._v("分支结构")]),t._v(" "),s("p",[t._v("分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分\n支。")])])]),t._v(" "),s("h2",{attrs:{id:"正则表达式的拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的拆分"}},[t._v("#")]),t._v(" 正则表达式的拆分")]),t._v(" "),s("h3",{attrs:{id:"表达式结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式结构"}},[t._v("#")]),t._v(" 表达式结构")]),t._v(" "),s("p",[t._v("avaScript 正则表达式中，都有哪些结构呢? 字符字面量、字符组、量词、锚、分组、选择分支、反向引用。\n具体含义简要回顾如下:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("结构")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("字面量")]),t._v(" "),s("td",[t._v('匹配一个具体字符，包括不用转义的和需要转义的。比如 a 匹配字符 "a"， 又比如 \\n 匹配换行符，又比如 . 匹配小数点。')])]),t._v(" "),s("tr",[s("td",[t._v("字符组")]),t._v(" "),s("td",[t._v("匹配一个字符，可以是多种可能之一，比如 [0-9]，表示匹配一个数字。 也有 \\d 的简写形式。 另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如 [^0-9]， 表示一个非数字字符，也有 \\D 的简写形式。")])]),t._v(" "),s("tr",[s("td",[t._v("量词")]),t._v(" "),s("td",[t._v('表示一个字符连续出现，比如 a{1,3} 表示 "a" 字符连续出现 3 次。 另外还有常见的简写形式，比如 a+ 表示 "a" 字符连续出现至少一次。')])]),t._v(" "),s("tr",[s("td",[t._v("锚")]),t._v(" "),s("td",[t._v("匹配一个位置，而不是字符。比如 ^ 匹配字符串的开头，又比如 \\b 匹配单词边界， 又比如 (?=\\d) 表示数字前面的位置。")])]),t._v(" "),s("tr",[s("td",[t._v("分组")]),t._v(" "),s("td",[t._v('用括号表示一个整体，比如 (ab)+，表示 "ab" 两个字符连续出现多次， 也可以使用非捕获分组 (?:ab)+。')])]),t._v(" "),s("tr",[s("td",[t._v("分支")]),t._v(" "),s("td",[t._v("多个子表达式多选一，比如 abc")])])])]),t._v(" "),s("h3",{attrs:{id:"操作符优先性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符优先性"}},[t._v("#")]),t._v(" 操作符优先性")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("操作符描述")]),t._v(" "),s("th",[t._v("操作符")]),t._v(" "),s("th",[t._v("优先级")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("转义符")]),t._v(" "),s("td",[t._v("\\")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("括号和方括号")]),t._v(" "),s("td",[t._v("(...)、(?:...)、(?=...)、(?!...)、[...]")]),t._v(" "),s("td",[t._v("2")])]),t._v(" "),s("tr",[s("td",[t._v("量词限定符")]),t._v(" "),s("td",[t._v("{m}、{m,n}、{m,}、?、*、+")]),t._v(" "),s("td",[t._v("3")])]),t._v(" "),s("tr",[s("td",[t._v("位置和序列")]),t._v(" "),s("td",[t._v("^、$、\\元字符、一般字符")]),t._v(" "),s("td",[t._v("4")])]),t._v(" "),s("tr",[s("td",[t._v("管道符(竖杠)")]),t._v(" "),s("td",[t._v("|")]),t._v(" "),s("td",[t._v("5")])])])]),t._v(" "),s("h3",{attrs:{id:"结构注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构注意点"}},[t._v("#")]),t._v(" 结构注意点")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("匹配字符串整体问题")])]),t._v(" "),s("li",[s("p",[t._v("量词连缀问题")])]),t._v(" "),s("li",[s("p",[t._v("元字符转义问题")]),t._v(" "),s("p",[t._v("所有结构里，用到的元字符总结如下: ^、$、.、*、+、?、|、\\、/、(、)、[、]、{、}、=、!、:、- ,\n当匹配上面的字符本身时，可以一律转义;")]),t._v(" "),s("p",[t._v("另外，在 string 中，也可以把每个字符转义，当然，转义后的结果仍是本身; 一般的做法是 string 中的 \\ 字符也要转义的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^$.*+?|\\\\/[]{}=!:-,"')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当中的 \\ 需要多转义一次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,"')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以把所有字符全部转义, 但是一般没有这个必要")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" string2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),s("p",[t._v("以及, 跟字符组相关的元字符有 [、]、^、-。因此在会引起歧义的地方进行转义")])])]),t._v(" "),s("h2",{attrs:{id:"正则表达式的构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的构建"}},[t._v("#")]),t._v(" 正则表达式的构建")]),t._v(" "),s("p",[t._v("接下来的内容中我们将通过以下几个角度来控制正则表达式的构建过程：")]),t._v(" "),s("ul",[s("li",[t._v("平衡法则")]),t._v(" "),s("li",[t._v("构建正则前提")]),t._v(" "),s("li",[t._v("准确性")]),t._v(" "),s("li",[t._v("效率")])]),t._v(" "),s("h3",{attrs:{id:"平衡法则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡法则"}},[t._v("#")]),t._v(" 平衡法则")]),t._v(" "),s("p",[t._v("构建正则需要考虑: 匹配预期的字符、不匹配非预期的字符串、可读性和可维护性、效率")]),t._v(" "),s("h3",{attrs:{id:"构建正则前提"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建正则前提"}},[t._v("#")]),t._v(" 构建正则前提")]),t._v(" "),s("p",[t._v("构建之前需要考虑: 是否能使用正则? 是否有必要使用正则? 是否有必要构建一个复杂的正则?")]),t._v(" "),s("h3",{attrs:{id:"准确性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准确性"}},[t._v("#")]),t._v(" 准确性")]),t._v(" "),s("p",[t._v("所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。")]),t._v(" "),s("h3",{attrs:{id:"效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#效率"}},[t._v("#")]),t._v(" 效率")]),t._v(" "),s("p",[t._v("正则表达式的运行分为如下的阶段:")]),t._v(" "),s("p",[s("code",[t._v("编译")]),t._v(" => "),s("code",[t._v("设定起始位置")]),t._v(" => "),s("code",[t._v("尝试匹配")]),t._v(" =>"),s("code",[t._v("匹配失败的话，从下一位开始继续第3步")]),t._v("=> "),s("code",[t._v("匹配成功或失败")])]),t._v(" "),s("p",[t._v("在整个过程中, 导致匹配性能问题的主要分为下面几个部分:")]),t._v(" "),s("ul",[s("li",[t._v("回溯")]),t._v(" "),s("li",[t._v("分组")]),t._v(" "),s("li",[t._v("移位速度")]),t._v(" "),s("li",[t._v("搜索范围")]),t._v(" "),s("li",[t._v("分支")])]),t._v(" "),s("h4",{attrs:{id:"i-使用具体型字符组来代替通配符-来消除回溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-使用具体型字符组来代替通配符-来消除回溯"}},[t._v("#")]),t._v(" I.使用具体型字符组来代替通配符，来消除回溯")]),t._v(" "),s("p",[t._v('因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存\n例如匹配字符串 123"abc"456 中的 "abc", 不要使用'),s("code",[t._v('/".*"/')]),t._v(", 最好使用"),s("code",[t._v('/"[^"]*"/')])]),t._v(" "),s("h4",{attrs:{id:"ii-使用非捕获型分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ii-使用非捕获型分组"}},[t._v("#")]),t._v(" II.使用非捕获型分组")]),t._v(" "),s("p",[t._v("因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。\n当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。\n例如，"),s("code",[t._v("/^[-]?(\\d\\.\\d+|\\d+|\\.\\d+)$/")]),t._v(" 可以修改成:"),s("code",[t._v("/^[-]?(?:\\d\\.\\d+|\\d+|\\.\\d+)$/")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"iii-独立出确定字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iii-独立出确定字符"}},[t._v("#")]),t._v(" III.独立出确定字符")]),t._v(" "),s("p",[t._v("例如，"),s("code",[t._v("/a+/")]),t._v(" 可以修改成 "),s("code",[t._v("/aa\\*/")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"iv-提取分支公共部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iv-提取分支公共部分"}},[t._v("#")]),t._v(" IV.提取分支公共部分")]),t._v(" "),s("p",[t._v("比如，"),s("code",[t._v("/^abc|^def/")]),t._v(" 修改成 "),s("code",[t._v("/^(?:abc|def)/")]),t._v("。 又比如， "),s("code",[t._v("/this|that/")]),t._v("修改成 "),s("code",[t._v("/th(?:is|at)/")]),t._v("。 这样做，可以减少匹配过程中可消除的重复。")]),t._v(" "),s("h4",{attrs:{id:"v-减少分支的数量-缩小它们的范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-减少分支的数量-缩小它们的范围"}},[t._v("#")]),t._v(" V.减少分支的数量，缩小它们的范围")]),t._v(" "),s("p",[s("code",[t._v("/red|read/")]),t._v(" 可以修改成 "),s("code",[t._v("/rea?d/")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"表达式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式编程"}},[t._v("#")]),t._v(" 表达式编程")]),t._v(" "),s("p",[t._v("正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。\n有了匹配这一基本操作后，才有其他的操作:"),s("code",[t._v("验证")]),t._v("、"),s("code",[t._v("切分")]),t._v("、"),s("code",[t._v("提取")]),t._v("、"),s("code",[t._v("替换")]),t._v("。 进行任何相关操作，也需要宿主引擎相关 API 的配合使用。当然，在 JavaScript 中，相关 API 也不多。")]),t._v(" "),s("p",[t._v("相关的 API 主要是下面几组:")]),t._v(" "),s("ul",[s("li",[t._v("String#search")]),t._v(" "),s("li",[t._v("String#split")]),t._v(" "),s("li",[t._v("String#match")]),t._v(" "),s("li",[t._v("String#replace")]),t._v(" "),s("li",[t._v("RegExp#test")]),t._v(" "),s("li",[t._v("RegExp#exec")])])])}),[],!1,null,null,null);a.default=_.exports}}]);