(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{396:function(s,a,t){"use strict";t.r(a);var e=t(27),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"docker-指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-指南"}},[s._v("#")]),s._v(" Docker 指南")]),s._v(" "),t("p",[s._v("最近重新学习了一遍 docker 相关的概念和知识, 在此记录相关知识点以作为备忘")]),s._v(" "),t("h2",{attrs:{id:"概念-作用-组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念-作用-组成"}},[s._v("#")]),s._v(" 概念 & 作用 & 组成")]),s._v(" "),t("h3",{attrs:{id:"docker-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-概念"}},[s._v("#")]),s._v(" Docker 概念")]),s._v(" "),t("div",{staticClass:"language-概念 extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker是LXC(Linux容器虚拟化)的产物, 为了提升集成环境的部署便利性而生, 将软件打包成标准化单元，以用于开发、交付和部署;\n")])])]),t("h3",{attrs:{id:"docker-的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的作用"}},[s._v("#")]),s._v(" Docker 的作用")]),s._v(" "),t("ul",[t("li",[s._v("开发者能够使用 Docker 在本地编写代码并通过容器与其他同事共享他们的工作。")]),s._v(" "),t("li",[s._v("他们能够使用 Docker 将编写好的程序推送至测试环境进行自动化测试或是人工测试。")]),s._v(" "),t("li",[s._v("当出现 Bugs 时，开发者可以在开发环境中修复它们，并很快的重新部署到测试环境中。")]),s._v(" "),t("li",[s._v("在测试完成后，部署装有应用程序的镜像就能完成生产环境的发布。")])]),s._v(" "),t("h3",{attrs:{id:"docker-的组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的组成"}},[s._v("#")]),s._v(" Docker 的组成")]),s._v(" "),t("ul",[t("li",[s._v("镜像(images)")]),s._v(" "),t("li",[s._v("容器(container)")]),s._v(" "),t("li",[s._v("网络(network)")]),s._v(" "),t("li",[s._v("数据卷(volume)")])]),s._v(" "),t("h2",{attrs:{id:"运行环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行环境"}},[s._v("#")]),s._v(" 运行环境")]),s._v(" "),t("p",[s._v("搭建 docker 的运行环境主要包括以下几个部分:")]),s._v(" "),t("ul",[t("li",[s._v("安装 docker")]),s._v(" "),t("li",[s._v("配 docker 加速镜像源")])]),s._v(" "),t("h3",{attrs:{id:"安装-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker"}},[s._v("#")]),s._v(" 安装 docker")]),s._v(" "),t("p",[s._v("在 Windows 和 Mac 中安装 Docker, 通过下面链接直接安装桌面应用, 非常简单")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-windows",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker for Windows"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-mac",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker for Mac"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("在 Linux 系统中安装 Docker, 通过下面命令即可")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" yum-utils device-mapper-persistent-data lvm2\n\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-ce\n\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" docker\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start docker\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Debian")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" apt-transport-https ca-certificates "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" gnupg2 software-properties-common\n\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://download.docker.com/linux/debian/gpg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" add-apt-repository "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deb [arch=amd64] https://download.docker.com/linux/debian  (lsb_release -cs) stable"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-ce\n\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" docker\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start docker\n")])])]),t("h3",{attrs:{id:"配置-docker-加速镜像源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-docker-加速镜像源"}},[s._v("#")]),s._v(" 配置 docker 加速镜像源")]),s._v(" "),t("p",[s._v("在 Linux 环境下，通过修改 /etc/docker/daemon.json ( 如果文件不存在，需要自己创建 ), 国内加速镜像源众多, 笔者此处使用了 ustc 和 163 的镜像源")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.mirrors.ustc.edu.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub-mirror.c.163.com"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("在 Macos 和 Windows 的 desktop 桌面端, 需要打开编辑配置, 如下图加入配置即可")]),s._v(" "),t("p",[t("img",{attrs:{src:"/blog/skills/images/715b1061ly1gg9b3nuhkyj21ls10oq7r.jpg",alt:"docker镜像源配置"}})]),s._v(" "),t("h2",{attrs:{id:"操作镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作镜像"}},[s._v("#")]),s._v(" 操作镜像")]),s._v(" "),t("p",[s._v("一般获取镜像的途径都是从官方的镜像仓库中获得, 镜像仓库类似于(github), 此处记录操作镜像常用的命令")]),s._v(" "),t("p",[t("strong",[s._v("获取镜像")]),s._v(": "),t("code",[s._v("docker pull [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker pull ubuntu\n")])])]),t("p",[t("strong",[s._v("查看本地镜像")]),s._v(": "),t("code",[s._v("docker images")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker images\n")])])]),t("p",[t("strong",[s._v("搜索镜像")]),s._v(": "),t("code",[s._v("docker search [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker search ubuntu\n")])])]),t("p",[t("strong",[s._v("查看镜像详细信息")]),s._v(": "),t("code",[s._v("docker inspect [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker inspect redis:4.0\n")])])]),t("p",[t("strong",[s._v("删除本地镜像")]),s._v(": "),t("code",[s._v("docker rmi [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker rmi ubuntu:latest\n")])])]),t("h2",{attrs:{id:"使用容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用容器"}},[s._v("#")]),s._v(" 使用容器")]),s._v(" "),t("p",[s._v("容器是基于容器技术所建立和运行的轻量级应用运行环境,在 Docker 中，容器算是最核心的部分, 此处分为以下三部分来记录:")]),s._v(" "),t("ul",[t("li",[s._v("操作命令")]),s._v(" "),t("li",[s._v("数据管理")]),s._v(" "),t("li",[s._v("使用网络")])]),s._v(" "),t("h3",{attrs:{id:"操作命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作命令"}},[s._v("#")]),s._v(" 操作命令")]),s._v(" "),t("p",[t("strong",[s._v("创建容器")]),s._v(": "),t("code",[s._v("docker create [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker create nginx:1.12\n")])])]),t("p",[t("strong",[s._v("启动容器")]),s._v(": "),t("code",[s._v("docker start nginx")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker start nginx\n")])])]),t("p",[t("strong",[s._v("创建并启动")]),s._v(": "),t("code",[s._v("docker run --name [name] -d [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run --name nginx -d nginx:1.12\n")])])]),t("p",[t("strong",[s._v("查看容器")]),s._v(": "),t("code",[s._v("docker ps")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看全部容器")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -a\n")])])]),t("p",[t("strong",[s._v("停止容器")]),s._v(": "),t("code",[s._v("docker stop [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker stop nginx\n")])])]),t("p",[t("strong",[s._v("删除容器")]),s._v(": "),t("code",[s._v("docker rm [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除未运行的容器")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" nginx\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除任何状态的容器")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" nginx -f\n")])])]),t("p",[t("strong",[s._v("进入容器")]),s._v(": "),t("code",[s._v("docker exec [name/tag/id] [命令]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" /etc/hostname\n")])])]),t("p",[t("strong",[s._v("容器开启命令行交互")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])])]),t("p",[s._v("上面 -i ( --interactive ) 表示保持我们的输入流，只有使用它才能保证控制台程序能够正确识别我们的命令。而 -t ( --tty ) 表示启用一个伪终端，形成我们与 bash 的交互，如果没有它，我们无法看到 bash 内部的执行结果")]),s._v(" "),t("p",[t("strong",[s._v("衔接容器")]),s._v(": "),t("code",[s._v("docker attach [name/tag/id]")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker attach nginx\n")])])]),t("h3",{attrs:{id:"数据管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[s._v("#")]),s._v(" 数据管理")]),s._v(" "),t("p",[s._v("数据管理又分为以下几个部分:")]),s._v(" "),t("ul",[t("li",[s._v("挂载方式")]),s._v(" "),t("li",[s._v("数据卷操作")]),s._v(" "),t("li",[s._v("数据卷容器")]),s._v(" "),t("li",[s._v("备份迁移")])]),s._v(" "),t("h4",{attrs:{id:"挂载方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挂载方式"}},[s._v("#")]),s._v(" 挂载方式")]),s._v(" "),t("p",[s._v("在 docker 中, 为了方便与外面数据传递, docker 基于底层存储实现，提供了三种适用于不同场景的文件系统挂载方式：Bind Mount、Volume 和 Tmpfs Mount。")]),s._v(" "),t("ul",[t("li",[s._v("Bind Mount")])]),s._v(" "),t("p",[s._v("能够直接将宿主操作系统中的目录和文件挂载到容器内的文件系统中，通过指定容器外的路径和容器内的路径，就可以形成挂载映射关系，在容器内外对文件的读写，都是相互可见的。")]),s._v(" "),t("p",[t("code",[s._v("使用方式: -v <host-path>:<container-path>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html nginx:1.12\n")])])]),t("ul",[t("li",[s._v("Volume")])]),s._v(" "),t("p",[s._v("也是从宿主操作系统中挂载目录到容器内，只不过这个挂载的目录由 Docker 进行管理，我们只需要指定容器内的目录，不需要关心具体挂载到了宿主操作系统中的哪里。")]),s._v(" "),t("p",[t("code",[s._v("使用方式: -v <container-path>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d --name webapp -v /webapp/storage webapp:latest\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如需查看具体挂载信息")]),s._v("\ndocker inspect webapp\n")])])]),t("ul",[t("li",[s._v("Tmpfs Mount")])]),s._v(" "),t("p",[s._v("支持挂载系统内存中的一部分到容器的文件系统里，不过由于内存和容器的特征，它的存储并不是持久的，其中的内容会随着容器的停止而消失。")]),s._v(" "),t("p",[t("code",[s._v("使用方式: --tmpfs <container-path>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d --name webapp -v /webapp/storage webapp:latest\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如需查看临时文件目录")]),s._v("\ndocker inspect webapp\n")])])]),t("ul",[t("li",[s._v("Mount")])]),s._v(" "),t("p",[s._v("在 --mount 中，我们可以通过逗号分隔这种 CSV 格式来定义多个参数。其中，通过 type 我们可以定义挂载类型，其值可以是：bind，volume 或 tmpfs。另外，--mount 选项能够帮助我们实现集群挂载的定义;")]),s._v(" "),t("p",[t("code",[s._v("使用方式: --mount <type>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name webapp webapp:latest --mount "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'type=volume,src=appdata,dst=/webapp/storage,volume-driver=local,volume-opt=type=nfs,volume-opt=device=<nfs-server>:<nfs-path>'")]),s._v(" webapp:latest\n")])])]),t("h4",{attrs:{id:"数据卷操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷操作"}},[s._v("#")]),s._v(" 数据卷操作")]),s._v(" "),t("p",[s._v("数据卷命名: "),t("code",[s._v("-v <name>:<container-path>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name webapp -v appdata:/webapp/storage webapp:latest\n")])])]),t("p",[s._v("共用数据卷: "),t("code",[s._v("使用同名的数据卷[name]即可")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name webapp -v html:/webapp/html webapp:latest\ndocker run -d --name nginx -v html:/usr/share/nginx/html:ro nginx:1.12\n")])])]),t("p",[s._v("创建独立数据卷: "),t("code",[s._v("docker volume create")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker volume create appdata\n")])])]),t("p",[s._v("查看已创建的数据卷: "),t("code",[s._v("docker volume ls")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker volume "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n")])])]),t("p",[s._v("删除数据卷: "),t("code",[s._v("docker volume rm")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker volume "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" appdata\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加上-v参数可以一并删除容器关联的数据卷")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -v webapp\n")])])]),t("p",[s._v("删除未引用的数据卷: "),t("code",[s._v("docker volume prune")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker volume prune -f\n")])])]),t("h4",{attrs:{id:"数据卷容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器"}},[s._v("#")]),s._v(" 数据卷容器")]),s._v(" "),t("p",[s._v("创建数据卷容器的方式很简单，由于不需要容器本身运行，因而我们找个简单的系统镜像都可以完成创建。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker create --name appdata -v /webapp/storage ubuntu\n")])])]),t("p",[s._v("引用数据卷容器: "),t("code",[s._v("--volumes-from <name>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name webapp --volumes-from appdata webapp:latest\n")])])]),t("h4",{attrs:{id:"备份迁移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#备份迁移"}},[s._v("#")]),s._v(" 备份迁移")]),s._v(" "),t("p",[s._v("要备份数据，我们先建立一个临时的容器，将用于备份的目录和要备份的数据卷都挂载到这个容器上")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run --rm --volumes-from appdata -v /backup:/backup ubuntu "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" cvf /backup/backup.tar /webapp/storage\n")])])]),t("p",[s._v("如果要恢复数据卷中的数据，我们也可以借助临时容器完成")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run --rm --volumes-from appdata -v /backup:/backup ubuntu "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" xvf /backup/backup.tar -C /webapp/storage --strip\n")])])]),t("h3",{attrs:{id:"使用网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用网络"}},[s._v("#")]),s._v(" 使用网络")]),s._v(" "),t("p",[s._v("容器使用网络这部分, 笔者将这部分分为以下几个部分来描述:")]),s._v(" "),t("ul",[t("li",[s._v("核心组成")]),s._v(" "),t("li",[s._v("容器互联")]),s._v(" "),t("li",[s._v("暴露端口")]),s._v(" "),t("li",[s._v("别名连接")]),s._v(" "),t("li",[s._v("创建网络")]),s._v(" "),t("li",[s._v("端口映射")])]),s._v(" "),t("h4",{attrs:{id:"核心组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心组成"}},[s._v("#")]),s._v(" 核心组成")]),s._v(" "),t("p",[s._v("容器网络实质上也是由 Docker 为应用程序所创造的虚拟环境的一部分，它能让应用从宿主机操作系统的网络环境中独立出来，形成容器自有的网络设备、IP 协议栈、端口套接字、IP 路由表、防火墙等等与网络相关的模块, 容器的网络主要由"),t("code",[s._v("沙盒")]),s._v("和"),t("code",[s._v("网络")]),s._v("以及"),t("code",[s._v("端点")]),s._v("组成")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("沙盒")]),s._v(": 提供了容器的虚拟网络栈")]),s._v(" "),t("li",[t("strong",[s._v("网络")]),s._v(": 组成 Docker 内部的虚拟子网")]),s._v(" "),t("li",[t("strong",[s._v("端点")]),s._v(": 主要目的是形成一个可以控制的突破封闭的网络环境的出入口")])]),s._v(" "),t("h4",{attrs:{id:"容器互联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器互联"}},[s._v("#")]),s._v(" 容器互联")]),s._v(" "),t("p",[s._v("要让一个容器连接到另外一个容器，我们可以在容器通过"),t("code",[s._v("docker create")]),s._v("或"),t("code",[s._v("docker run")]),s._v("创建时通过"),t("code",[s._v("--link")]),s._v("选项进行配置")]),s._v(" "),t("p",[s._v("例如，这里我们创建一个 MySQL 容器，将运行我们 Web 应用的容器连接到这个 MySQL 容器上，打通两个容器间的网络，实现它们之间的网络互通。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("  docker run -d --name mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_RANDOM_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("yes mysql\n  docker run -d --name webapp --link mysql webapp:latest\n")])])]),t("h4",{attrs:{id:"暴露端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暴露端口"}},[s._v("#")]),s._v(" 暴露端口")]),s._v(" "),t("p",[s._v("口的暴露可以通过 Docker 镜像进行定义，也可以在容器创建时进行定义。在容器创建时进行定义的方法是借助 --expose 这个选项。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d --name mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_RANDOM_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("yes --expose "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13306")]),s._v(" --expose "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23306")]),s._v(" mysql:5.7\n")])])]),t("p",[s._v("这里我们为 MySQL 暴露了 13306 和 23306 这两个端口，暴露后我们可以在 docker ps 中看到这两个端口已经成功的打开。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                       NAMES\n3c4e645f21d7        mysql:5.7           "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.s…"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" seconds ago       Up "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" seconds        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])])]),t("h4",{attrs:{id:"别名连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#别名连接"}},[s._v("#")]),s._v(" 别名连接")]),s._v(" "),t("p",[s._v("纯粹的通过容器名来打开容器间的网络通道缺乏一定的灵活性，在 Docker 里还支持连接时使用别名来使我们摆脱容器名的限制。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d --name webapp --link mysql:database webapp:latest\n")])])]),t("p",[s._v("在这里，我们使用 "),t("code",[s._v("--link <name>:<alias>")]),s._v(" 的形式，连接到 MySQL 容器，并设置它的别名为 database。当我们要在 Web 应用中使用 MySQL 连接时，我们就可以使用 database 来代替连接地址了。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("String url "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jdbc:mysql://database:3306/webapp"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h4",{attrs:{id:"创建网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建网络"}},[s._v("#")]),s._v(" 创建网络")]),s._v(" "),t("p",[s._v("在 Docker 里，我们也能够创建网络，形成自己定义虚拟子网的目的。")]),s._v(" "),t("p",[s._v("docker CLI 里与网络相关的命令都以 docker network 开头，其中创建网络的命令是 "),t("code",[s._v("docker network create")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker network create -d bridge individual\n")])])]),t("p",[s._v("通过 "),t("code",[s._v("docker network ls")]),s._v(" 或是 "),t("code",[s._v("docker network list")]),s._v(" 可以查看 Docker 中已经存在的网络。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker network "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nNETWORK ID          NAME                DRIVER              SCOPE\nbc14eb1da66b        bridge              bridge              "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("\n35c3ef1cc27d        individual          bridge              "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("\n")])])]),t("p",[s._v("之后在我们创建容器时，可以通过"),t("code",[s._v("--network")]),s._v(" 来指定容器所加入的网络，一旦这个参数被指定，容器便不会默认加入到 bridge 这个网络中了 ( 但是仍然可以通过 "),t("code",[s._v("--network bridge")]),s._v(" 让其加入 )。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d --name mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_RANDOM_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("yes --network individual mysql:5.7\n")])])]),t("p",[s._v("查看容器网络: "),t("code",[s._v("docker inspect")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker inspect mysql\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## ......")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NetworkSettings"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## ......")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Networks"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"individual"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPAMConfig"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" null,\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Links"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" null,\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Aliases"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2ad678e6d110"')]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NetworkID"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"35c3ef1cc27d24e15a2b22bdd606dc28e58f0593ead6a57da34a8ed989b1b15d"')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EndpointID"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"41a2345b913a45c3c5aae258776fcd1be03b812403e249f96b161e50d66595ab"')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Gateway"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.18.0.1"')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPAddress"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.18.0.2"')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPPrefixLen"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPv6Gateway"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GlobalIPv6Address"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GlobalIPv6PrefixLen"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MacAddress"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"02:42:ac:12:00:02"')]),s._v(",\n                    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DriverOpts"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" null\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## ......")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## ......")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("h4",{attrs:{id:"端口映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#端口映射"}},[s._v("#")]),s._v(" 端口映射")]),s._v(" "),t("p",[s._v("要映射端口，我们可以在创建容器时使用"),t("code",[s._v("-p")]),s._v("或者是 "),t("code",[s._v("--publish")]),s._v("选项。")]),s._v(" "),t("p",[s._v("端口映射格式: "),t("code",[s._v("-p <ip>:<host-port>:<container-port>")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d --name nginx -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v(":443 nginx:1.12\n")])])]),t("h2",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),t("p",[s._v("Dockerfile 是 Docker 中用于定义镜像自动化构建流程的配置文件, 通过 Dockerfile 我们可以更加清晰、明确的给定 Docker 镜像的制作过程, 文件体积小巧能更加方便实现容器迁移和集群部署")]),s._v(" "),t("ul",[t("li",[s._v("Dockerfile 结构")]),s._v(" "),t("li",[s._v("常见 Dockerfile 指令")]),s._v(" "),t("li",[s._v("Dockerfile 构建")])]),s._v(" "),t("h3",{attrs:{id:"dockerfile-结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-结构"}},[s._v("#")]),s._v(" Dockerfile 结构")]),s._v(" "),t("p",[s._v("如果进行细分，我们可以将 Dockerfile 的指令简单分为五大类。")]),s._v(" "),t("ul",[t("li",[s._v("基础指令：用于定义新镜像的基础和性质。")]),s._v(" "),t("li",[s._v("控制指令：是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。")]),s._v(" "),t("li",[s._v("引入指令：用于将外部文件直接引入到构建镜像内部。")]),s._v(" "),t("li",[s._v("执行指令：能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。")]),s._v(" "),t("li",[s._v("配置指令：对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置。")])]),s._v(" "),t("h3",{attrs:{id:"常见-dockerfile-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见-dockerfile-指令"}},[s._v("#")]),s._v(" 常见 Dockerfile 指令")]),s._v(" "),t("p",[t("strong",[s._v("FROM")]),s._v(": "),t("code",[s._v("FROM")]),s._v(" 指令指定一个基础镜像, 可以使用以下三种形式使用")]),s._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" <image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("AS <name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" <image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("<tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("AS <name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" <image"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("@<digest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("AS <name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[t("strong",[s._v("RUN")]),s._v(": "),t("code",[s._v("RUN")]),s._v(" 指令之后，我们直接拼接上需要执行的命令，在构建时，Docker 就会执行这些命令，并将它们对文件系统的修改记录下来，形成镜像的变化;")]),s._v(" "),t("p",[s._v("主要用来用来指定构建镜像(build image) 过程中执行的命令")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("RUN "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executable"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("`\n")])])]),t("p",[t("strong",[s._v("CMD")]),s._v(": 指定容器运行时("),t("code",[s._v("docker run")]),s._v(") 默认命令和参数，可以被 "),t("code",[s._v("docker run *** command")]),s._v(" 的命令所覆盖")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("RUN & CMD & ENTRYPOINT 区别:")]),s._v(" "),t("p",[t("code",[s._v("RUN")]),s._v("不接任何命令, 同时没有"),t("code",[s._v("ENTRYPOINT")]),s._v("指定, 将默认执行 CMD")]),s._v(" "),t("p",[t("code",[s._v("RUN")]),s._v("不接任何命令, 同时存在"),t("code",[s._v("ENTRYPOINT")]),s._v("和"),t("code",[s._v("CMD")]),s._v(", "),t("code",[s._v("CMD")]),s._v("将作为"),t("code",[s._v("ENTRYPOINT")]),s._v("的参数")]),s._v(" "),t("p",[t("code",[s._v("RUN")]),s._v("后接 command, 同时存在"),t("code",[s._v("ENTRYPOINT")]),s._v("和"),t("code",[s._v("CMD")]),s._v(", "),t("code",[s._v("RUN")]),s._v("后的参数作为"),t("code",[s._v("ENTRYPOINT")]),s._v("的参数, "),t("code",[s._v("CMD")]),s._v("被忽略")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executable"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" param1 param2\n")])])]),t("p",[t("strong",[s._v("ENTRYPOINT")]),s._v(": 容器运行时执行的命令，但是可以接受"),t("code",[s._v("docker run *** args")]),s._v("或者 CMD 提供的参数，一般用于容器配置初始化")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("ENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executable"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" param1 param2\n")])])]),t("p",[t("strong",[s._v("EXPOSE")]),s._v(": 通过 EXPOSE 指令就可以为镜像指定要暴露的端口。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("EXPOSE "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("protocol"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[t("strong",[s._v("VOLUME")]),s._v(": 定义基于此镜像的容器所自动建立的数据卷, 以便于持久化一些数据，比如数据库中存储数据的文件夹就需要单独处理")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("VOLUME "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("在 VOLUME 指令中定义的目录，在基于新镜像创建容器时，会自动建立为数据卷，不需要我们再单独使用 -v 选项来配置了。")]),s._v(" "),t("p",[t("strong",[s._v("COPY & ADD")])]),s._v(" "),t("p",[s._v("在制作新的镜像的时候，我们可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 "),t("code",[s._v("COPY")]),s._v(" 或 ADD 指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("COPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dest"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nADD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dest"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\nCOPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<src>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<dest>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nADD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<src>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<dest>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("COPY 与 ADD 指令的定义方式完全一样，需要注意的仅是当我们的目录中存在空格时，可以使用后两种格式避免空格产生歧义。")]),s._v(" "),t("p",[s._v("对比 "),t("code",[s._v("COPY")]),s._v(" 与 "),t("code",[s._v("ADD")]),s._v("，两者的区别主要在于 "),t("code",[s._v("ADD")]),s._v(" 能够支持使用网络端的 "),t("code",[s._v("URL")]),s._v(" 地址作为 src 源，并且在源文件被识别为压缩包时，自动进行解压，而 "),t("code",[s._v("COPY")]),s._v(" 没有这两个能力。")]),s._v(" "),t("p",[s._v("虽然看上去 "),t("code",[s._v("COPY")]),s._v(" 能力稍弱，但对于那些不希望源文件被解压或没有网络请求的场景，COPY 指令是个不错的选择。")]),s._v(" "),t("h3",{attrs:{id:"dockerfile-构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建"}},[s._v("#")]),s._v(" Dockerfile 构建")]),s._v(" "),t("p",[s._v("构建镜像的命令为 "),t("code",[s._v("docker build")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker build ./webapp\n")])])]),t("p",[s._v("如果我们的 Dockerfile 文件路径不在这个目录下，或者有另外的文件名，我们可以通过"),t("code",[s._v("-f")]),s._v("选项单独给出 Dockerfile 文件的路径。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在构建时我们最好总是携带上 -t 选项，用它来指定新生成镜像的名称。")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker build -t webapp:latest ./webapp\n")])])]),t("h2",{attrs:{id:"组合应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合应用"}},[s._v("#")]),s._v(" 组合应用")]),s._v(" "),t("p",[s._v("一个完整的应用, 需要用多个 docker, 这个章节来记录如何组建组合应用, 为何阐述清楚, 讲"),t("code",[s._v("docker compose")]),s._v("分为以下几个部分来写:")]),s._v(" "),t("ul",[t("li",[s._v("Docker Compose 配置文件")])])])}),[],!1,null,null,null);a.default=r.exports}}]);