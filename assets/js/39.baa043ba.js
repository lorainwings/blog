(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{417:function(t,v,_){"use strict";_.r(v);var a=_(27),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"正则表达式小知识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式小知识"}},[t._v("#")]),t._v(" 正则表达式小知识")]),t._v(" "),_("p",[t._v("经常使用正则表达式, 但是有些细节知识总是没搞清楚, 在看了《JS 正则表达式》后一些知识点豁然开朗, 此处只做记录, 不做展开;")]),t._v(" "),_("h2",{attrs:{id:"如果要匹配任意字符怎么办"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如果要匹配任意字符怎么办"}},[t._v("#")]),t._v(" 如果要匹配任意字符怎么办")]),t._v(" "),_("p",[t._v("可以使用 "),_("code",[t._v("[\\d\\D]")]),t._v("、"),_("code",[t._v("[\\w\\W]")]),t._v("、"),_("code",[t._v("[\\s\\S]")]),t._v(" 和 "),_("code",[t._v("[^]")]),t._v(" 中任何的一个。")]),t._v(" "),_("h2",{attrs:{id:"贪婪匹配与惰性匹配表示法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配与惰性匹配表示法"}},[t._v("#")]),t._v(" 贪婪匹配与惰性匹配表示法")]),t._v(" "),_("p",[t._v("通过在量词后面加个问号就能实现惰性匹配")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v(" 惰性量词")]),t._v(" "),_("th",[t._v("贪婪量词")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("{m,n}?")]),t._v(" "),_("td",[t._v("{m,n}")])]),t._v(" "),_("tr",[_("td",[t._v("{m,}?")]),t._v(" "),_("td",[t._v("{m,}")])]),t._v(" "),_("tr",[_("td",[t._v("??")]),t._v(" "),_("td",[t._v("?")])]),t._v(" "),_("tr",[_("td",[t._v("+?")]),t._v(" "),_("td",[t._v("+")])]),t._v(" "),_("tr",[_("td",[t._v("*?")]),t._v(" "),_("td",[t._v("*")])])])]),t._v(" "),_("h2",{attrs:{id:"位置匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),_("p",[t._v("ES6 正则的位置表示方式总共有: "),_("code",[t._v("^")]),t._v("、 "),_("code",[t._v("$")]),t._v("、"),_("code",[t._v("\\b")]),t._v("、"),_("code",[t._v("\\B")]),t._v("、"),_("code",[t._v("(?=)")]),t._v("、"),_("code",[t._v("(?!)")]),t._v("、"),_("code",[t._v("(?<=)")]),t._v("、"),_("code",[t._v("(?<!)")])]),t._v(" "),_("p",[t._v("其中"),_("code",[t._v("\\b")]),t._v("和"),_("code",[t._v("\\B")]),t._v("表示什么位置?")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("\\b 与\\B 用法:")]),t._v(" "),_("p",[t._v("\\b 是单词边界，具体就是 \\w 与 \\W 之间的位置，也包括 \\w 与 ^ 之间的位置，和 \\w 与 $ 之间的位置。")]),t._v(" "),_("p",[t._v("\\B 是 \\b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \\b，剩下的都是 \\B 的。")])]),t._v(" "),_("h2",{attrs:{id:"括号匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#括号匹配"}},[t._v("#")]),t._v(" 括号匹配")]),t._v(" "),_("p",[t._v("分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配; 反向引用也是一样的;")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token regex"}},[_("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d)+")]),_("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["12345", "5", index: 0, input: "12345"]')]),t._v("\n")])])]),_("h2",{attrs:{id:"匹配回溯"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#匹配回溯"}},[t._v("#")]),t._v(" 匹配回溯")]),t._v(" "),_("p",[t._v("一般语言中(包括 JS)使用的正则引擎是 NFA(非确定型有限自动机),导致匹配回溯的类型主要是三种:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("贪婪量词")]),t._v(" "),_("p",[t._v("少用贪婪量词("),_("code",[t._v(". + ? *")]),t._v(")等")])]),t._v(" "),_("li",[_("p",[t._v("惰性量词")]),t._v(" "),_("p",[t._v("虽然惰性量词不贪，但也会有回溯的现象。比如正则是 "),_("code",[t._v("\\d{1,3}?\\d{1,3}")])])]),t._v(" "),_("li",[_("p",[t._v("分支结构")]),t._v(" "),_("p",[t._v("分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分\n支。")])])]),t._v(" "),_("h2",{attrs:{id:"操作符优先性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符优先性"}},[t._v("#")]),t._v(" 操作符优先性")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("操作符描述")]),t._v(" "),_("th",[t._v("操作符")]),t._v(" "),_("th",[t._v("优先级")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("转义符")]),t._v(" "),_("td",[t._v("\\")]),t._v(" "),_("td",[t._v("1")])]),t._v(" "),_("tr",[_("td",[t._v("括号和方括号")]),t._v(" "),_("td",[t._v("(...)、(?:...)、(?=...)、(?!...)、[...]")]),t._v(" "),_("td",[t._v("2")])]),t._v(" "),_("tr",[_("td",[t._v("量词限定符")]),t._v(" "),_("td",[t._v("{m}、{m,n}、{m,}、?、*、+")]),t._v(" "),_("td",[t._v("3")])]),t._v(" "),_("tr",[_("td",[t._v("位置和序列")]),t._v(" "),_("td",[t._v("^、$、\\元字符、一般字符")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("管道符(竖杠)")]),t._v(" "),_("td",[t._v("|")]),t._v(" "),_("td",[t._v("5")])])])]),t._v(" "),_("h2",{attrs:{id:"正则表达式的构建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的构建"}},[t._v("#")]),t._v(" 正则表达式的构建")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("平衡法则")])]),t._v(" "),_("li",[_("p",[t._v("构建正则前提")])])]),t._v(" "),_("h2",{attrs:{id:"表达式编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表达式编程"}},[t._v("#")]),t._v(" 表达式编程")]),t._v(" "),_("p",[t._v("... 未完待续")])])}),[],!1,null,null,null);v.default=s.exports}}]);